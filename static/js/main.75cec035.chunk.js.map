{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Math","floor","random","number","setNumber","copyMessage","setCopyMessage","window","innerWidth","width","setWidth","useEffect","addEventListener","handleWindowSize","removeEventListener","isMobile","numberArray","toString","split","map","i","Number","console","log","OIB","concat","remainder","length","subRemainder","control","controlNumber","join","className","onClick","navigator","clipboard","writeText","copyToClipboard","onMouseLeave","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAkFeA,MA/Ef,WACE,MAA4BC,mBAASC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAyB,KAA9E,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAsCL,mBAAS,SAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAA0BP,mBAASQ,OAAOC,YAA1C,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WAGR,OAFAJ,OAAOK,iBAAiB,SAAUC,GAE3B,WACLN,OAAOO,oBAAoB,SAAUD,MAEtC,IAEH,IAAIE,EAAYN,GAAS,IAEnBI,EAAmB,WACvBH,EAASH,OAAOC,aASZQ,EAAcb,EAAOc,WAAWC,MAAM,IAAIC,KAAI,SAAAC,GAAC,OAAIC,OAAOD,MAChEE,QAAQC,IAAIP,GAGZ,IAwBMQ,EAAMR,EAAYS,OAxBF,WAGpB,IAFA,IAAIC,EAAY,GAEPN,EAAI,EAAGA,EAAIJ,EAAYW,OAAQP,IAAK,CAC3C,IAEIQ,GAFQZ,EAAYI,GACNM,GACO,GAEJ,IAAjBE,IACFA,EAAe,IAIjBF,EADkC,EAAfE,EACM,GACzBN,QAAQC,IAAI,WAAYG,GAI1B,IAAMG,EAAU,GAAKH,IAAc,GAAK,EAAI,GAAKA,EAEjD,OADAJ,QAAQC,IAAI,iBAAkBM,GACvBA,EAIsBC,IAAiBC,KAAK,IAiBrD,OAhBAT,QAAQC,IAAIC,GAiBR,sBAAKQ,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,2BACA,qBAAIA,UAAU,cAAcC,QAAS,kBAjBnB,WACtB,GAAIlB,EACF,OAAO,KAGPmB,UAAUC,UAAUC,UAAUZ,GAC9BlB,EAAe,WAW8B+B,IAAmBC,aAP9C,WACpBhC,EAAe,UAMX,UAA4FkB,EAA5F,IAAiG,sBAAMQ,UAAU,cAAhB,SAA+B3B,OAChI,wBAAQ2B,UAAU,SAASC,QAAS,WArDxC7B,EAAUJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAyB,MAqD/C,oCCjEOqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75cec035.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.sass';\n\nfunction App() {\n  const [number, setNumber] = useState(Math.floor(Math.random() * 9000000000) + 1000000000)\n  const [copyMessage, setCopyMessage] = useState('Copy!')\n  const [width, setWidth] = useState(window.innerWidth)\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSize)\n\n    return () => {\n      window.removeEventListener('resize', handleWindowSize)\n    }\n  }, [])\n\n  let isMobile = (width <= 768)\n\n  const handleWindowSize = () => {\n    setWidth(window.innerWidth)\n  }\n  \n  // Create random 10 digit number\n  const randomNumber = () => {\n    setNumber(Math.floor(Math.random() * 9000000000) + 1000000000)\n  } \n\n  // Split numbers to individual digits \n  const numberArray = number.toString().split('').map(i => Number(i))\n  console.log(numberArray);\n\n  // Calculate control number from random 10 digits\n  const controlNumber = () => {\n    let remainder = 10\n\n    for (let i = 0; i < numberArray.length; i++) {\n      let digit = numberArray[i]\n      let sum = digit + remainder\n      let subRemainder = sum % 10\n      \n      if (subRemainder === 0) {\n        subRemainder = 10\n      }\n      \n      const multiplied = subRemainder * 2\n      remainder = multiplied % 11\n      console.log('ostatak:', remainder);\n    }\n\n    // Calculate control number\n    const control = 11 - remainder === 10 ? 0 : 11 - remainder\n    console.log('kontrolniBroj:', control);\n    return control\n  }\n\n  // Join random 10 digit number with the calculated control number\n  const OIB = numberArray.concat(controlNumber()).join('')\n  console.log(OIB);\n\n  const copyToClipboard = () => {\n    if (isMobile) {\n      return null\n    } else {\n      // Copy number to clipboard on click\n      navigator.clipboard.writeText(OIB)\n      setCopyMessage('Copied!')\n    }\n  }\n\n  const changeMessage = () => {\n    setCopyMessage('Copy!')\n  }\n\n  return (\n      <div className=\"app\">\n        <h1 className=\"title\">OIB Generator</h1>\n        <h1 className=\"oib tooltip\" onClick={() => copyToClipboard()} onMouseLeave={changeMessage}>{OIB} <span className=\"tooltipText\">{copyMessage}</span></h1>\n        <button className=\"button\" onClick={() => randomNumber()}>Generiraj novi OIB</button>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}